{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#to do list:\n",
    "# write a code for a start button the begin the test\n",
    "# format the questions in a pretty way\n",
    "# finish creating all the questions\n",
    "# link to a google form\n",
    "# add a way of allowing users to view their performance in comparison to the class dataset results\n",
    "# make interface more pretty\n",
    "#fix timing and score - sometimes timing is negative, sometimes score is over 100%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing the python libraries\n",
    "from IPython.display import display, Image, clear_output, HTML, Audio\n",
    "from jupyter_ui_poll import ui_events\n",
    "import ipywidgets as widgets\n",
    "import time\n",
    "import random\n",
    "import os\n",
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import json \n",
    "import warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "def register_text_input_event(text_input):\n",
    "    event_info['type'] = \"text_entry\"\n",
    "    event_info['description'] = text_input.value\n",
    "    event_info['time'] = time.time()\n",
    "    return\n",
    "\n",
    "def text_input(prompt=None):\n",
    "    text_input = widgets.Text(description=prompt, style= {'description_width': 'initial'})\n",
    "    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
    "    text_input.on_submit(register_text_input_event)\n",
    "    display(text_input)\n",
    "    event = wait_for_event()\n",
    "    text_input.disabled = True\n",
    "    return event['description']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to send data to Google Form\n",
    "\n",
    "def send_to_google_form(data_dict, form_url):\n",
    "\n",
    "    form_id = form_url[34:90]\n",
    "    view_form_url = f'https://docs.google.com/forms/d/e/{form_id}/viewform'\n",
    "    post_form_url = f'https://docs.google.com/forms/d/e/{form_id}/formResponse'\n",
    "\n",
    "    page = requests.get(view_form_url)\n",
    "    content = BeautifulSoup(page.content, \"html.parser\").find('script', type='text/javascript')\n",
    "    content = content.text[27:-1]\n",
    "    result = json.loads(content)[1][1]\n",
    "    form_dict = {}\n",
    "    \n",
    "    loaded_all = True\n",
    "    for item in result:\n",
    "        if item[1] not in data_dict:\n",
    "            print(f\"Form item {item[1]} not found. Data not uploaded.\")\n",
    "            loaded_all = False\n",
    "            return False\n",
    "        form_dict[f'entry.{item[4][0][0]}'] = data_dict[item[1]]\n",
    "    \n",
    "    post_result = requests.post(post_form_url, data=form_dict)\n",
    "    return post_result.ok\n",
    "\n",
    "\n",
    "'''def send_to_google_form(data_dict, form_url):\n",
    "    form_id = form_url.split('/d/')[1].split('/viewform')[0]\n",
    "    view_form_url = f'https://docs.google.com/forms/d/e/1FAIpQLScLFJvQWuQ4voGLWNRkINu0vr1j35uWCZ3-zriKamc09tYpfg/viewform'\n",
    "    post_form_url = f'https://docs.google.com/forms/d/e/1FAIpQLScLFJvQWuQ4voGLWNRkINu0vr1j35uWCZ3-zriKamc09tYpfg/formResponse'\n",
    "\n",
    "    page = requests.get(view_form_url)\n",
    "    content = BeautifulSoup(page.content, \"html.parser\").find('script', type='text/javascript')\n",
    "    content = content.text[27:-1]\n",
    "    result = json.loads(content)[1][1]\n",
    "    form_dict = {}\n",
    "\n",
    "    loaded_all = True\n",
    "    for item in result:\n",
    "        if item[1] not in data_dict:\n",
    "            print(f\"Form item {item[1]} not found. Data not uploaded.\")\n",
    "            loaded_all = False\n",
    "            return False\n",
    "        form_dict[f'entry.{item[4][0][0]}'] = data_dict[item[1]]\n",
    "\n",
    "    post_result = requests.post(post_form_url, data=form_dict)\n",
    "    return post_result.ok'''\n",
    "\n",
    "# Function for waiting for an event\n",
    "def wait_for_event(timeout=-1, interval=0.001, max_rate=20, allow_interupt=True):    \n",
    "    start_wait = time.time()\n",
    "\n",
    "    # reset event info\n",
    "    event_info['type'] = \"\"\n",
    "    event_info['description'] = \"\"\n",
    "    event_info['time'] = -1\n",
    "\n",
    "    n_proc = int(max_rate*interval)+1\n",
    "    \n",
    "    with ui_events() as ui_poll:\n",
    "        keep_looping = True\n",
    "        while keep_looping==True:\n",
    "\n",
    "            # process UI events\n",
    "            ui_poll(n_proc)\n",
    "\n",
    "            # end the loop if the time spent looping is longer than the timeout period. -1 can be set for no timeout\n",
    "            if (timeout != -1) and (time.time() > start_wait + timeout):\n",
    "                keep_looping = False\n",
    "\n",
    "            # when the event_info description changes, stop looping\n",
    "            if allow_interupt==True and event_info['description']!=\"\":\n",
    "                keep_looping = False\n",
    "\n",
    "            time.sleep(interval)\n",
    "    \n",
    "    return event_info\n",
    "\n",
    "# Function to register button event\n",
    "def register_btn_event(btn):\n",
    "    event_info['type'] = \"button click\"\n",
    "    event_info['description'] = btn.description\n",
    "    event_info['time'] = time.time()\n",
    "\n",
    "# Function to display widgets centered\n",
    "def display_centered(widget):\n",
    "    box_layout = widgets.Layout(display='flex', justify_content='center', align_items='center')\n",
    "    box = widgets.Box([widget], layout=box_layout)\n",
    "    display(box)\n",
    "\n",
    "# Callback function for submit button\n",
    "def submit_button_callback():\n",
    "    global gender, age\n",
    "    age = age_dropdown.value\n",
    "    gender = gender_radiobuttons.value\n",
    "    # Call send_to_google_form here with correct data and URL\n",
    "    clear_output(wait=False)\n",
    "\n",
    "#used to display a message for the user with a countdown feature in it\n",
    "def timer(message):\n",
    "    for i in range(5, 0, -1):\n",
    "        clear_output(wait=True)\n",
    "        formatted_message = message.format(i)\n",
    "        style = \"color: orchid; font-size: 100px; display: flex; justify-content: center; align-items: center;\"\n",
    "        display(HTML(f\"<div style='{style}'><span>{formatted_message}</span></div>\"))\n",
    "        time.sleep(1)\n",
    "    clear_output(wait=True)\n",
    "timer_message = \"Beginning the test in... {}\"\n",
    "\n",
    "# Function to display the submit button\n",
    "def submit_button(age_dropdown, gender_radiobuttons):\n",
    "    confirm_btn = widgets.Button(description=\"Confirm and Begin\")\n",
    "    display_centered(confirm_btn)\n",
    "    confirm_btn.on_click(register_btn_event)\n",
    "    wait_for_event()\n",
    "    submit_button_callback()\n",
    "    clear_output(wait=False)\n",
    "\n",
    "\n",
    "# Main function to get personal information\n",
    "def personal_info():\n",
    "    personal_info_1 = 'Welcome to the Arithmetic test. This test will take approximately 3 minutes and the questions will progressively increase in difficulty.'\n",
    "    personal_info_2 = 'Each part of the question will flash on your screen for 1.5 seconds after which you will be prompted to respond.'\n",
    "    personal_info_3 = 'Your final score will be calculated based on the time taken to answer each question and the number of correct answers, so try to be quick and precise!'\n",
    "    style_personal_info = \"color: cornflowerblue; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_1}</span></div>\"))\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_2}</span></div>\"))\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_3}</span></div>\"))\n",
    "    time.sleep(3)\n",
    "    personal_info_4 = 'First, please can you provide some background information for an anonymised study. Filling out this form will be considered consent for data collection. Thank you!'\n",
    "    style_personal_info_2 = \"color: plum; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "    display(HTML(f\"<div style='{style_personal_info_2}'><span>{personal_info_4}</span></div>\"))\n",
    "    time.sleep(2)\n",
    "\n",
    "    personal_info_5 = 'How old are you?'\n",
    "    display(HTML(f\"<div style='{style_personal_info_2}'><span>{personal_info_5}</span></div>\"))\n",
    "    display_centered(age_dropdown)\n",
    "\n",
    "    personal_info_5 = 'What is your gender?'\n",
    "    display(HTML(f\"<div style='{style_personal_info_2}'><span>{personal_info_5}</span></div>\"))\n",
    "    display_centered(gender_radiobuttons)\n",
    "\n",
    "    submit_button(age_dropdown, gender_radiobuttons)\n",
    "    clear_output(wait=False)\n",
    "\n",
    "    personal_info_6 = 'Thank you! The test will begin shortly.'\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_6}</span></div>\"))\n",
    "    time.sleep(2)\n",
    "    clear_output(wait=False)\n",
    "\n",
    "    timer(timer_message)\n",
    "    global test_start_time\n",
    "    test_start_time = time.time() \n",
    "\n",
    "#fix this!!!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def upload_data():\n",
    "    \n",
    "    results_data = {\n",
    "    \n",
    "        'answer': users_answers\n",
    "    }\n",
    "    \n",
    "    myresults = pd.DataFrame(results_data)\n",
    "    results_json = myresults.to_json()\n",
    "    \n",
    "    \n",
    "    data_dict = {\n",
    "        'gender': gender,\n",
    "        'age': age,\n",
    "        'results': results_json, \n",
    "        'test_time': total_test_time,\n",
    "        'score_as_percent': score_percentage,\n",
    "        'score_with_penalty': score_time\n",
    "        }\n",
    "    \n",
    "    form_url = 'https://docs.google.com/forms/d/e/1FAIpQLSeec7lgksjIePCmUxYP3KOo3Ww2NdeytOsWx-K2UiqQDbEfaw/viewform?usp=sf_link' \n",
    "\n",
    "    send_to_google_form(data_dict, form_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def clear_screen():\n",
    "    \"\"\"\n",
    "    Clears the output screen based on the operating system.\n",
    "    \"\"\"\n",
    "    os.system('cls' if os.name == 'nt' else 'clear')\n",
    "\n",
    "# Function to handle the submission of an answer and ensure the code continues running if a non-numerical value is input\n",
    "def on_submit(their_answer):\n",
    "    global correct, incorrect, times, current_index, start_time, users_answers\n",
    "    time_to_answer = time.time() - start_time  # Time taken for this question\n",
    "    times.append(time_to_answer)  # Append time for this question\n",
    "    \n",
    "    if their_answer == None:\n",
    "        error_handling_style = \"color: tomato; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "        error_handling= 'Invalid input entered. Please only type numbers :)! Try again.'\n",
    "        display(HTML(f\"<div style='{error_handling_style}'><span>{error_handling}</span></div>\"))\n",
    "\n",
    "        # Here we don't increment the current_index as we're retrying the current question.\n",
    "        time.sleep(2)\n",
    "        clear_output(wait=True)\n",
    "        display_question(current_index)  # Display next question\n",
    "    else:\n",
    "        time_to_answer = time.time() - start_time\n",
    "        times.append(time_to_answer)\n",
    "    \n",
    "        style_personal_info = \"color: skyblue; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "\n",
    "    if their_answer == answers[current_index]:\n",
    "        correct_answer_response = f\"{answers[current_index]} is correct! :)\"\n",
    "        display(HTML(f\"<div style='{style_personal_info}'><span>{correct_answer_response}</span></div>\"))\n",
    "        correct += 1\n",
    "        users_answers.append(1)\n",
    "    else:\n",
    "        incorrect_answer_response = f\"Incorrect :( The correct answer was: {answers[current_index]}\"\n",
    "        display(HTML(f\"<div style='{style_personal_info}'><span>{incorrect_answer_response}</span></div>\"))\n",
    "        incorrect += 1\n",
    "        users_answers.append(0)\n",
    "        \n",
    "    if current_index < len(questions) - 1:\n",
    "        current_index += 1\n",
    "        time.sleep(2)\n",
    "        clear_output(wait=True)\n",
    "        display_question(current_index)  # Display next question\n",
    "    else:\n",
    "        calculate_score()\n",
    "\n",
    "# Function to display the question using widgets\n",
    "def display_question(index):\n",
    "    \"\"\"\n",
    "    Displays each component of the question.\n",
    "    \n",
    "    Parameters:\n",
    "    index: int, the index of the current question\n",
    "    \"\"\"\n",
    "    global start_time\n",
    "    question = questions[index]\n",
    "    start_time = time.time()\n",
    "    for part in question.split():\n",
    "        style = \"color: palevioletred; font-size: 100px; display: flex; justify-content: center; align-items: center;\"\n",
    "        display(HTML(f\"<div style='{style}'><span>{part}</span></div>\"))\n",
    "        time.sleep(1.5)\n",
    "        clear_output(wait=True)\n",
    "\n",
    "    answer_input = text_input(\"Answer: \")\n",
    "\n",
    "\n",
    "    if not answer_input.lstrip(\"-\").isdigit():\n",
    "        on_submit(None)\n",
    "    else :\n",
    "        ans_input_int = int(answer_input)\n",
    "        on_submit(ans_input_int)\n",
    "\n",
    "# Function to calculate and display the final score\n",
    "def calculate_score():\n",
    "    global total_test_time\n",
    "    global score_percentage\n",
    "    global score_time\n",
    "    \"\"\"\n",
    "    Calculates the final score based on the number of correct and incorrect answers and the time taken.\n",
    "    \"\"\"\n",
    "    total_test_time = time.time() - test_start_time  # Total time for the test\n",
    "    print(f\"Test completed in {total_test_time:.2f} seconds.\")\n",
    "    score_percentage = (correct / (correct + incorrect)) * 100\n",
    "    print(f\"You got: {correct} questions correct out of {len(questions)} ({score_percentage:.2f}%)\")\n",
    "\n",
    "    hypothesis_time = hypothesis_time_per_question * len(questions)\n",
    "    time_difference = total_test_time - hypothesis_time\n",
    "\n",
    "    # Apply penalty only if the total time taken is more than the hypothetical time\n",
    "    penalty = max(time_difference, 0) * 0.01  # 0.01 as the penalty rate\n",
    "\n",
    "    # Calculate final score\n",
    "    score_time = ((correct - penalty) / (correct + incorrect)) * 100\n",
    "    print(f\"Accounting for the time taken, your final score is {score_time:.2f}%! :)\")\n",
    "\n",
    "# Main test function\n",
    "def run_math():\n",
    "    personal_info()\n",
    "    \n",
    "    \"\"\"\n",
    "    Runs the math test by displaying each question and collecting answers.\n",
    "    \"\"\"\n",
    "    display_question(0)  # Display first question\n",
    "    upload_data()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Questions and answers\n",
    "\n",
    "\n",
    "event_info = {\n",
    "    'type': '',\n",
    "    'description': '',\n",
    "    'time': -1}\n",
    "age_dropdown = widgets.Dropdown(\n",
    "        options=[('Select Age', None)] + [(str(age), age) for age in range(18, 30)],\n",
    "        value=None\n",
    "    )\n",
    "gender_radiobuttons = widgets.RadioButtons(\n",
    "        options=['Male', 'Female', 'Other'],\n",
    "        description='',\n",
    "        disabled=False\n",
    "    )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bca714947e894f0883f477755f37d865",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Text(value='', description='Answer: ', style=DescriptionStyle(description_width='initial'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/lx/mwpm9m9x37l73n7zlnvp_jsr0000gn/T/ipykernel_526/1532106566.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mrun_math\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/lx/mwpm9m9x37l73n7zlnvp_jsr0000gn/T/ipykernel_526/1322498828.py\u001b[0m in \u001b[0;36mrun_math\u001b[0;34m()\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0mRuns\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mmath\u001b[0m \u001b[0mtest\u001b[0m \u001b[0mby\u001b[0m \u001b[0mdisplaying\u001b[0m \u001b[0meach\u001b[0m \u001b[0mquestion\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcollecting\u001b[0m \u001b[0manswers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m     \"\"\"\n\u001b[0;32m--> 103\u001b[0;31m     \u001b[0mdisplay_question\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Display first question\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m     \u001b[0mupload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/var/folders/lx/mwpm9m9x37l73n7zlnvp_jsr0000gn/T/ipykernel_526/1322498828.py\u001b[0m in \u001b[0;36mdisplay_question\u001b[0;34m(index)\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0mclear_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m     \u001b[0manswer_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtext_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Answer: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/var/folders/lx/mwpm9m9x37l73n7zlnvp_jsr0000gn/T/ipykernel_526/1524773872.py\u001b[0m in \u001b[0;36mtext_input\u001b[0;34m(prompt)\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mtext_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_submit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mregister_text_input_event\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext_input\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mevent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwait_for_event\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0mtext_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisabled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mevent\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'description'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/var/folders/lx/mwpm9m9x37l73n7zlnvp_jsr0000gn/T/ipykernel_526/2561699114.py\u001b[0m in \u001b[0;36mwait_for_event\u001b[0;34m(timeout, interval, max_rate, allow_interupt)\u001b[0m\n\u001b[1;32m     73\u001b[0m                 \u001b[0mkeep_looping\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m             \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minterval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mevent_info\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# Global variables\n",
    "correct = 0\n",
    "incorrect = 0\n",
    "times = []\n",
    "current_index = 0\n",
    "hypothesis_time_per_question = 4\n",
    "start_time = 0  # Start time for each question\n",
    "test_start_time = 0  # Start time for the entire test\n",
    "users_answers=[]\n",
    "questions = ['9 + 7', '13 - 20', '34 + 21', '56 - 28', '27 ÷ 9',\n",
    "    '5 × 8', '56 ÷ 7', '8 × 11', '144 ÷ 12', '184 + 49',\n",
    "    '135 ÷ 3', '13 × 7', '17 × 12', '119 + 37', '1091 - 195',\n",
    "    '112 ÷ 16', '703 - 339']\n",
    "\n",
    "answers = [16, -7, 55, 28, 3,\n",
    "    40, 8, 88, 12, 233,\n",
    "    45, 91, 204, 156, 896,\n",
    "    7, 364]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "run_math()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
