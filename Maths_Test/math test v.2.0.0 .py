{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the necessary libraries\n",
    "\n",
    "######## Before running this code, please enter \"pip install gspread\" into your terminal so that all features run correctly. ########\n",
    "\n",
    "######## Please restart the kernel! ########\n",
    "\n",
    "from IPython.display import display, Image, clear_output, HTML, Audio\n",
    "from jupyter_ui_poll import ui_events\n",
    "import ipywidgets as widgets\n",
    "import time\n",
    "import random\n",
    "import os\n",
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import json \n",
    "import warnings\n",
    "import gspread "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to register the text input event\n",
    "def register_text_input_event(text_input):\n",
    "    \"\"\"\n",
    "    Registers the text input event.\n",
    "    \n",
    "    Parameters:\n",
    "    text_input (Widget): The text input widget.\n",
    "    \"\"\"\n",
    "    event_info['type'] = \"text_entry\"\n",
    "    event_info['description'] = text_input.value\n",
    "    event_info['time'] = time.time()\n",
    "    return\n",
    "\n",
    "\n",
    "# Function to create a text input widget to improve user interface\n",
    "def text_input(prompt=None):\n",
    "    \"\"\"\n",
    "    Creates a text input widget.\n",
    "    \n",
    "    Parameters:\n",
    "    prompt (str): The prompt to display for the text input widget.\n",
    "    \n",
    "    Returns:\n",
    "    str: The text entered by the user.\n",
    "    \"\"\"\n",
    "    text_widget = widgets.Text(description=prompt, style={'description_width': 'initial'})\n",
    "    text_widget.on_submit(register_text_input_event)\n",
    "    box_layout = widgets.Layout(display='flex', justify_content='center', align_items='center')\n",
    "    box = widgets.Box([text_widget], layout=box_layout)\n",
    "    display(box)\n",
    "    event = wait_for_event()\n",
    "    text_widget.disabled = True\n",
    "    return text_widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to send data to Google Forms for collection\n",
    "\n",
    "def send_to_google_form(data_dict, form_url):\n",
    "    \"\"\"\n",
    "    Sends data to a Google Form.\n",
    "    \n",
    "    Parameters:\n",
    "    data_dict (dict): A dictionary containing the data to be sent.\n",
    "    form_url (str): The URL of the Google Form.\n",
    "    \n",
    "    Returns:\n",
    "    bool: True if the data is successfully sent, False otherwise.\n",
    "    \"\"\"\n",
    "\n",
    "    # Extracting form ID from the provided URL\n",
    "    form_id = form_url[34:90]\n",
    "\n",
    "    # URL template to view and post the form\n",
    "    view_form_url = f'https://docs.google.com/forms/d/e/{form_id}/viewform'\n",
    "    post_form_url = f'https://docs.google.com/forms/d/e/{form_id}/formResponse'\n",
    "\n",
    "    # Fetching the form and extracting the required data for submission\n",
    "    page = requests.get(view_form_url)\n",
    "    content = BeautifulSoup(page.content, \"html.parser\").find('script', type='text/javascript')\n",
    "    content = content.text[27:-1]\n",
    "    result = json.loads(content)[1][1]\n",
    "\n",
    "    # Mapping form fields to data dictionary keys\n",
    "    form_dict = {}\n",
    "    loaded_all = True\n",
    "    for item in result:\n",
    "        if item[1] not in data_dict:\n",
    "            print(f\"Form item {item[1]} not found. Data not uploaded.\")\n",
    "            loaded_all = False\n",
    "            return False\n",
    "        form_dict[f'entry.{item[4][0][0]}'] = data_dict[item[1]]\n",
    "    # Sending the data to the Google Form\n",
    "    post_result = requests.post(post_form_url, data=form_dict)\n",
    "    return post_result.ok\n",
    "\n",
    "# Function for waiting for an event\n",
    "def wait_for_event(timeout=-1, interval=0.001, max_rate=20, allow_interupt=True):    \n",
    "    start_wait = time.time()\n",
    "    \"\"\"\n",
    "    Waits for an event to occur.\n",
    "    \n",
    "    Parameters:\n",
    "    timeout (float): The timeout period in seconds. Default is -1 (no timeout).\n",
    "    interval (float): The time interval between checks for events. Default is 0.001 seconds.\n",
    "    max_rate (int): The maximum rate of events per second. Default is 20.\n",
    "    allow_interupt (bool): Whether to allow interruption of the wait. Default is True.\n",
    "    \n",
    "    Returns:\n",
    "    dict: Information about the event.\n",
    "    \"\"\"\n",
    "    # This initialises and resets event information\n",
    "    event_info['type'] = \"\"\n",
    "    event_info['description'] = \"\"\n",
    "    event_info['time'] = -1\n",
    "\n",
    "    n_proc = int(max_rate*interval)+1\n",
    "    \n",
    "    with ui_events() as ui_poll:\n",
    "        keep_looping = True\n",
    "        while keep_looping==True:\n",
    "\n",
    "            # Process UI events\n",
    "            ui_poll(n_proc)\n",
    "\n",
    "            # Ends the loop if the time spent looping is longer than the timeout period. Here, -1 can be set for no timeout.\n",
    "            if (timeout != -1) and (time.time() > start_wait + timeout):\n",
    "                keep_looping = False\n",
    "\n",
    "            # When the event_info description changes, looping stops.\n",
    "            if allow_interupt==True and event_info['description']!=\"\":\n",
    "                keep_looping = False\n",
    "\n",
    "            time.sleep(interval)\n",
    "    \n",
    "    return event_info\n",
    "\n",
    "# Function to register button clicking event\n",
    "def register_btn_event(btn):\n",
    "    event_info['type'] = \"button click\"\n",
    "    event_info['description'] = btn.description\n",
    "    event_info['time'] = time.time()\n",
    "\n",
    "# Function to display widgets centered (to standardise aesthetics and reduce interruptions between reading the question and inputing the answer)\n",
    "def display_centered(widget):\n",
    "    # Setting layout for centered display\n",
    "    box_layout = widgets.Layout(display='flex', justify_content='center', align_items='center')\n",
    "    box = widgets.Box([widget], layout=box_layout)\n",
    "    display(box)\n",
    "\n",
    "# Callback function for submit button\n",
    "def submit_button_callback():\n",
    "    # This function is called when the submit button is clicked\n",
    "    global gender, age\n",
    "    # Extracting age and gender values from respective widgets\n",
    "    age = age_dropdown.value\n",
    "    gender = gender_radiobuttons.value\n",
    "    # Call send_to_google_form here with correct data and URL\n",
    "    clear_output(wait=False)\n",
    "\n",
    "#Display a message for the user with a countdown feature before beginning test.\n",
    "def timer(message):\n",
    "    # Countdown from 5 to 0, displaying each number\n",
    "    for i in range(5, 0, -1):\n",
    "        clear_output(wait=True)\n",
    "        formatted_message = message.format(i)\n",
    "        style = \"color: orchid; font-size: 100px; display: flex; justify-content: center; align-items: center;\"\n",
    "        display(HTML(f\"<div style='{style}'><span>{formatted_message}</span></div>\"))\n",
    "        time.sleep(1)\n",
    "    clear_output(wait=True)\n",
    "timer_message = \"Beginning the test in... {}\"\n",
    "\n",
    "\n",
    "\n",
    "# button used to input confirmation from user\n",
    "confirm_btn = widgets.Button(description = \"Confirm\")\n",
    "\n",
    "# Function to display the submit button\n",
    "def submit_button(age_dropdown, gender_radiobuttons):\n",
    "    confirm_btn = widgets.Button(description=\"Confirm and Begin\")\n",
    "    display_centered(confirm_btn)\n",
    "    confirm_btn.on_click(register_btn_event)\n",
    "    wait_for_event()\n",
    "    submit_button_callback()\n",
    "    clear_output(wait=False)\n",
    "\n",
    "# This displays a confirm button for user interaction\n",
    "def confirm_button():\n",
    "    display_centered(confirm_btn)\n",
    "    confirm_btn.on_click(register_btn_event)\n",
    "    wait_for_event()\n",
    "    clear_output(wait=False)\n",
    "    return\n",
    "\n",
    "\n",
    "# Initialize user_id as an empty string\n",
    "user_id = \"\"\n",
    "\n",
    "# Main function to get personal information\n",
    "def personal_info(): \n",
    "    global user_id\n",
    "    # Using HTML formatting to improve the text layout and make it more visually appealing\n",
    "    personal_info_1 = 'Welcome to the Arithmetic test. This test will take approximately 3 minutes and the questions will progressively increase in difficulty.'\n",
    "    personal_info_2 = 'Each part of the question will flash on your screen for 1.5 seconds after which you will be prompted to respond.'\n",
    "    personal_info_3 = 'Your final score will be calculated based on the time taken to answer each question and the number of correct answers, so try to be quick and precise!'\n",
    "    #creating HTML format for the introductory text\n",
    "    style_personal_info = \"color: cornflowerblue; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_1}</span></div>\"))\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_2}</span></div>\"))\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_3}</span></div>\"))\n",
    "    time.sleep(3)\n",
    "    \n",
    "    #Creating HTML styles for the consent request text\n",
    "    style_consent = \"color: paleturquoise; font-size: 15px; display: flex; justify-content: center; align-items: center;\"\n",
    "    # Displaying instructions for creating an anonymous user ID\n",
    "    display(HTML(f\"\"\"<span style='{style_consent}'>Please create an anonymous ID.<br /><br />\n",
    "   To generate an anonymous 4-letter unique user identifier please enter:<br />\n",
    "    - two letters based on the initials (first and last name) of a childhood friend<br /> \n",
    "    - two letters based on the initials (first and last name) of a favourite actor / actress<br />\n",
    "   e.g. if your friend was called Charlie Brown and film star was Tom Cruise<br />\n",
    "    then your unique identifier would be CBTC</span>\"\"\"))\n",
    "    time.sleep(1.5)\n",
    "\n",
    "    display(HTML(f\"\"\"<span style='{style_consent}'>Please enter your user ID below.</span>\"\"\"))\n",
    "    looped = False\n",
    "    \n",
    "    # isalpha() checks if the string only contains letters. It will display an error message if the text is inputted wrong. Loop for validating the user ID input\n",
    "    while True:\n",
    "        text_widget = text_input(\"User ID: \")  # Getting the Text widget\n",
    "        user_id = text_widget.value  # Getting the text input from the Text widget\n",
    "        data_dict['user_id'] = user_id\n",
    "        # Validating the user ID format\n",
    "        if len(user_id) != 4 or not user_id.isalpha():\n",
    "            clear_output(wait=True)\n",
    "            # Error message for invalid input\n",
    "            error_handling_style = \"color: tomato; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "            display(HTML(f\"\"\"<span style='{error_handling_style}'>Please enter a valid user ID with exactly four letters, containing only letters.</span>\"\"\"))\n",
    "        else:\n",
    "            data_dict['user id'] = user_id\n",
    "            break\n",
    "\n",
    "    # Data consent request\n",
    "    display(HTML(f\"\"\"<span style='{style_consent}'>Please read:<br /><br />\n",
    "    We wish to record your response data to an anonymised public data repository.<br />\n",
    "    Your data will be used for educational teaching purposes practising data<br /> \n",
    "    analysis and visualisation.<br />\n",
    "    Results consent is necessary to continue.<br />\n",
    "    Do you consent to the storage of your age, gender and results?</span>\"\"\"))\n",
    "    # Consent checkboxes and confirm button - ensuring they are centered for visual appeal\n",
    "    display_centered(personal_consent_checkbox)\n",
    "    display_centered(results_consent_checkbox)\n",
    "    confirm_button()\n",
    "\n",
    "    # Error handling - handling the case where the user does not give consent\n",
    "    if not (personal_consent_checkbox.value and results_consent_checkbox.value):\n",
    "        display(HTML(f\"\"\"<span style='{style_consent}'>The user does not wish to share results.<br />\n",
    "        The test cannot continue.</span>\"\"\"))\n",
    "        raise SystemExit(\"Exiting the test... :(\")  # Terminate the test!! We need consent to continue!\n",
    "        return\n",
    "    # Additional personal information requests\n",
    "    personal_info_4 = 'Please provide some background information for an anonymised study. Thank you!'\n",
    "    style_personal_info_2 = \"color: plum; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "    display(HTML(f\"<div style='{style_personal_info_2}'><span>{personal_info_4}</span></div>\"))\n",
    "    time.sleep(2)\n",
    "    # Asking for user's age+gender\n",
    "    personal_info_5 = 'How old are you?'\n",
    "    display(HTML(f\"<div style='{style_personal_info_2}'><span>{personal_info_5}</span></div>\"))\n",
    "    display_centered(age_dropdown)\n",
    "    personal_info_5 = 'What is your gender?'\n",
    "    display(HTML(f\"<div style='{style_personal_info_2}'><span>{personal_info_5}</span></div>\"))\n",
    "    display_centered(gender_radiobuttons)\n",
    "\n",
    "    # Processing the submission of age and gender\n",
    "    submit_button(age_dropdown, gender_radiobuttons)\n",
    "    clear_output(wait=False)\n",
    "\n",
    "    # Message indicating the test is about to begin\n",
    "    personal_info_6 = 'Thank you! The test will begin shortly.'\n",
    "    display(HTML(f\"<div style='{style_personal_info}'><span>{personal_info_6}</span></div>\"))\n",
    "    time.sleep(2)\n",
    "    clear_output(wait=False)\n",
    "    # Initiating the test countdown\n",
    "    timer(timer_message)\n",
    "    # Recording the test start time\n",
    "    global test_start_time\n",
    "    test_start_time = time.time() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to upload test results data to a Google Form\n",
    "def upload_data():\n",
    "    # Results data dictionary with user's answers\n",
    "    results_data = {\n",
    "    \n",
    "        'answer': users_answers # Contains user's answers\n",
    "    }\n",
    "    \n",
    "    # Converting the results data to a Pandas dataframe and then to JSON\n",
    "    myresults = pd.DataFrame(results_data)\n",
    "    results_json = myresults.to_json()\n",
    "    \n",
    "    # data dictionary to be sent to Google Forms\n",
    "    data_dict = {\n",
    "        'user_id': user_id, \n",
    "        'gender': gender,\n",
    "        'age': age,\n",
    "        'results': results_json, # User's test results in JSON format\n",
    "        'test_time': total_test_time, # Total time taken for the test\n",
    "        'score_as_percent': score_percentage, # User's score as a percentage\n",
    "        'score_with_penalty': score_time # User's score adjusted for penalties\n",
    "        }\n",
    "    \n",
    "     # URL of the Google Form where data will be uploaded\n",
    "    form_url = 'https://docs.google.com/forms/d/e/1FAIpQLSeec7lgksjIePCmUxYP3KOo3Ww2NdeytOsWx-K2UiqQDbEfaw/viewform?usp=sf_link' \n",
    "\n",
    "    send_to_google_form(data_dict, form_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Function to clear the output screen\n",
    "def clear_screen():\n",
    "    \"\"\"\n",
    "    Clears the output screen based on the operating system.\n",
    "    \"\"\"\n",
    "    # Uses system command to clear the console\n",
    "    os.system('cls' if os.name == 'nt' else 'clear')\n",
    "\n",
    "# Function to handle the submission of an answer and ensure the code continues running if a non-numerical value is input\n",
    "def on_submit(their_answer):\n",
    "    global correct, incorrect, times, current_index, start_time, users_answers\n",
    "    \n",
    "\n",
    "    # Error handling - Handling non-numerical input with an error message\n",
    "    if their_answer == None:\n",
    "        error_handling= 'Invalid input entered. Please only type numbers :)! Try again.'\n",
    "        error_handling_style = \"color: tomato; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "        display(HTML(f\"<div style='{error_handling_style}'><span>{error_handling}</span></div>\"))\n",
    "\n",
    "        # Here we don't increment the current_index as we're retrying the current question.\n",
    "        time.sleep(2)\n",
    "        clear_output(wait=True)\n",
    "        display_question(current_index)  # Redisplaying the same question\n",
    "    else:\n",
    "        # Processing the submitted answer\n",
    "        time_to_answer = time.time() - start_time\n",
    "        times.append(time_to_answer) # Append time for this question\n",
    "    \n",
    "        style_personal_info = \"color: skyblue; font-size: 20px; display: flex; justify-content: center; align-items: center;\"\n",
    "\n",
    "        \n",
    "        # Correct answer handling\n",
    "        if their_answer == answers[current_index]:\n",
    "            correct_answer_response = f\"{answers[current_index]} is correct! :)\"\n",
    "            display(HTML(f\"<div style='{style_personal_info}'><span>{correct_answer_response}</span></div>\"))\n",
    "            correct += 1\n",
    "            users_answers.append(1)\n",
    "        # Incorrect answer handling\n",
    "        else:\n",
    "            incorrect_answer_response = f\"Incorrect :( The correct answer was: {answers[current_index]}\"\n",
    "            display(HTML(f\"<div style='{style_personal_info}'><span>{incorrect_answer_response}</span></div>\"))\n",
    "            incorrect += 1\n",
    "            users_answers.append(0)\n",
    "            \n",
    "        # Moving to the next question or ending the test\n",
    "        if current_index < len(questions) - 1:\n",
    "            current_index += 1\n",
    "            time.sleep(2)\n",
    "            clear_output(wait=True)\n",
    "            display_question(current_index)  # Display next question\n",
    "        else:\n",
    "            calculate_score()\n",
    "\n",
    "# Function to display the question using widgets\n",
    "def display_question(index):\n",
    "    \"\"\"\n",
    "    Displays each component of the question.\n",
    "    \n",
    "    Parameters:\n",
    "    index: int, the index of the current question\n",
    "    \"\"\"\n",
    "    global start_time\n",
    "    question = questions[index]\n",
    "    start_time = time.time()\n",
    "\n",
    "    \n",
    "    # Displaying each part of the question with a delay of 1.5 seconds\n",
    "    for part in question.split():\n",
    "        style = \"color: palevioletred; font-size: 100px; display: flex; justify-content: center; align-items: center;\"\n",
    "        display(HTML(f\"<div style='{style}'><span>{part}</span></div>\"))\n",
    "        time.sleep(1.5)\n",
    "        clear_output(wait=True)\n",
    "\n",
    "\n",
    "    # Get the text input from the Text widget\n",
    "    answer_input= text_input(\"Answer: \")\n",
    "    answer_text = answer_input.value.strip()  # Get the text input and remove leading/trailing whitespace\n",
    "\n",
    "\n",
    "    if not answer_text.lstrip(\"-\").isdigit():\n",
    "        on_submit(None)\n",
    "    else:\n",
    "        ans_input_int = int(answer_text)\n",
    "        on_submit(ans_input_int)\n",
    "        \n",
    "# Function to calculate and display the final score\n",
    "def calculate_score():\n",
    "    global total_test_time\n",
    "    global score_percentage\n",
    "    global score_time\n",
    "    \"\"\"\n",
    "    Calculates the final score based on the number of correct and incorrect answers and the time taken.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Calculating the score\n",
    "    total_test_time = time.time() - test_start_time  # Total time for the test\n",
    "    hypothesis_time = hypothesis_time_per_question * len(questions)\n",
    "    time_difference = total_test_time - hypothesis_time\n",
    "\n",
    "    # Apply penalty only if the total time taken is more than the hypothetical time\n",
    "    if total_test_time > 4:\n",
    "        hypothesis_time = hypothesis_time_per_question * len(questions)\n",
    "        time_difference = total_test_time - hypothesis_time\n",
    "        penalty = max(time_difference, 0) * 0.01  # 0.01 as the penalty rate\n",
    "    else:\n",
    "        penalty = 0\n",
    "\n",
    "    # Calculate final score\n",
    "    score_time = ((correct - penalty) / (correct + incorrect)) * 100\n",
    "    score_percentage = (correct / (correct + incorrect)) * 100\n",
    "\n",
    "    def compare_score(sheet_id):\n",
    "        global position\n",
    "        position = 0\n",
    "        try:\n",
    "            converted_url = f'https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv'\n",
    "            compare_score_data = pd.read_csv(converted_url)\n",
    "            all_scores = compare_score_data['score_with_penalty'].dropna().tolist()\n",
    "            all_scores.append(score_time)  # Add the user's score\n",
    "            all_scores.sort(reverse=True)  # Sort scores in descending order\n",
    "            position = all_scores.index(score_time) + 1  # Find user's position\n",
    "            return all_scores\n",
    "        except Exception as e:\n",
    "            print(f\"Error in compare_score: {e}\")\n",
    "            return []\n",
    "\n",
    "\n",
    "\n",
    "    all_scores = compare_score(score_sheet)\n",
    "    num_scores = len(all_scores)\n",
    "\n",
    "    # Displaying final score and test completion messages\n",
    "    test_over_message = f\"Test completed in <b>{total_test_time:.2f}<b> seconds.\" \n",
    "    test_over_message_2 = f\"You got: <b>{correct}<b> questions correct out of <b>{len(questions)} ({score_percentage:.2f}%<b>)\"\n",
    "    test_over_message_3 = f\"Accounting for the time taken, your final score is <b>{score_time:.2f}%!<b> :)\"\n",
    "    test_over_message_4 = f\"You placed {position} out of {num_scores} individuals!\"\n",
    "\n",
    "    style_finish_test = \"color: pink; font-size: 40px; display: flex; justify-content: center; align-items: center;\"\n",
    "    display(HTML(f\"<div style='{style_finish_test}'><span>{test_over_message}</span></div>\"))\n",
    "    display(HTML(f\"<div style='{style_finish_test}'><span>{test_over_message_2}</span></div>\"))\n",
    "    display(HTML(f\"<div style='{style_finish_test}'><span>{test_over_message_3}</span></div>\"))\n",
    "    display(HTML(f\"<div style='{style_finish_test}'><span>{test_over_message_4}</span></div>\"))\n",
    "   \n",
    "\n",
    "\n",
    "# Main test function\n",
    "def run_math():\n",
    "    personal_info()\n",
    "    \n",
    "    \"\"\"\n",
    "    Runs the math test by displaying each question and collecting answers.\n",
    "    \"\"\"\n",
    "    display_question(0)  # Display first question\n",
    "    upload_data()\n",
    "\n",
    "\n",
    "\n",
    "# checkboxes used for consent\n",
    "personal_consent_checkbox = widgets.Checkbox(value=False, description=\"I consent to the use of my gender and age\", indent=False)\n",
    "results_consent_checkbox = widgets.Checkbox(value=False, description=\"I consent to the use of my results\", indent=False)\n",
    "event_info = {\n",
    "    'type': '',\n",
    "    'description': '',\n",
    "    'time': -1}\n",
    "\n",
    "age_dropdown = widgets.Dropdown(\n",
    "        options=[('Select Age', None)] + [(str(age), age) for age in range(18, 30)],\n",
    "        value=None\n",
    "    )\n",
    "gender_radiobuttons = widgets.RadioButtons(\n",
    "        options=['Male', 'Female', 'Other'],\n",
    "        description='',\n",
    "        disabled=False\n",
    "    )\n",
    "\n",
    "score_sheet= \"1n1xNxaowMPoybbubz0kXA7uq18OhQLnefFDJV6nUVsY\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Global variables\n",
    "correct = 0\n",
    "incorrect = 0\n",
    "times = []\n",
    "current_index = 0\n",
    "hypothesis_time_per_question = 4\n",
    "start_time = 0  # Start time for each question\n",
    "test_start_time = 0  # Start time for the entire test\n",
    "users_answers=[]\n",
    "user_id=[]\n",
    "\n",
    "questions = ['9 + 7', '13 - 20', '34 + 21', '56 - 28', '27 ÷ 9',\n",
    "    '5 × 8', '56 ÷ 7', '8 × 11', '144 ÷ 12', '184 + 49',\n",
    "    '135 ÷ 3', '13 × 7', '17 × 12', '119 + 37', '1091 - 195',\n",
    "    '112 ÷ 16', '703 - 339']\n",
    "\n",
    "answers = [16, -7, 55, 28, 3,\n",
    "    40, 8, 88, 12, 233,\n",
    "    45, 91, 204, 156, 896,\n",
    "    7, 364]\n",
    "\n",
    "data_dict = {'user id': '0', 'gender': 'NA', 'age': 'NA'}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# buffer cell #"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "49c8c2c93448487c9c1aec090ffada22",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Box(children=(Text(value='', description='Answer: ', style=DescriptionStyle(description_width='initial')),), l…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style='color: skyblue; font-size: 20px; display: flex; justify-content: center; align-items: center;'><span>16 is correct! :)</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style='color: pink; font-size: 40px; display: flex; justify-content: center; align-items: center;'><span>Test completed in <b>8.70<b> seconds.</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style='color: pink; font-size: 40px; display: flex; justify-content: center; align-items: center;'><span>You got: <b>1<b> questions correct out of <b>1 (100.00%<b>)</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style='color: pink; font-size: 40px; display: flex; justify-content: center; align-items: center;'><span>Accounting for the time taken, your final score is <b>95.30%!<b> :)</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style='color: pink; font-size: 40px; display: flex; justify-content: center; align-items: center;'><span>You placed 1 out of 22 individuals!</span></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# RUN THIS CELL TO RUN THE TEST :)\n",
    "run_math()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
